"""update 2024 feb 6

Revision ID: abed050008e1
Revises: 
Create Date: 2024-02-06 13:12:50.741572

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = 'abed050008e1'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_unique_constraint(None, 'cobra_convergence', ['pfs_visit_id'])
    op.create_unique_constraint(None, 'cosmic_rays', ['run_id', 'spectrograph', 'arm'])
    op.create_unique_constraint(None, 'data_processing', ['run_id'])
    op.create_unique_constraint(None, 'data_qa', ['run_id'])
    op.create_unique_constraint(None, 'detector_map', ['run_id', 'spectrograph', 'arm'])
    op.create_unique_constraint(None, 'dichroic_continuity', ['run_id', 'spectrograph'])
    op.create_unique_constraint(None, 'exposure_time', ['pfs_visit_id'])
    op.create_unique_constraint(None, 'flux_calibration', ['run_id', 'spectrograph', 'arm'])
    op.create_unique_constraint(None, 'guide_offset', ['pfs_visit_id'])
    op.create_unique_constraint(None, 'h4_persistence', ['run_id', 'spectrograph'])
    op.create_unique_constraint(None, 'mask', ['run_id', 'spectrograph', 'arm'])
    op.create_unique_constraint(None, 'moon', ['pfs_visit_id'])
    op.add_column('noise', sa.Column('wavelength_ref', sa.REAL(), nullable=True, comment='the reference wavelength to measure the sky background noise (nm)'))
    op.create_unique_constraint(None, 'noise', ['pfs_visit_id'])
    op.create_unique_constraint(None, 'pfs_visit', ['pfs_visit_id'])
    op.add_column('seeing', sa.Column('wavelength_ref', sa.REAL(), nullable=True, comment='the reference wavelength to measure the seeing (nm)'))
    op.create_unique_constraint(None, 'seeing', ['pfs_visit_id'])
    op.add_column('sky', sa.Column('agc_background_mean', sa.REAL(), nullable=True, comment='the mean agc image background level averaged over the FoV/fibers (counts)'))
    op.add_column('sky', sa.Column('agc_background_median', sa.REAL(), nullable=True, comment='the median agc image background level averaged over the FoV/fibers (counts)'))
    op.add_column('sky', sa.Column('agc_background_sigma', sa.REAL(), nullable=True, comment='the sigma of the agc image background level (counts)'))
    op.create_unique_constraint(None, 'sky', ['pfs_visit_id'])
    op.create_unique_constraint(None, 'sky_subtraction', ['run_id', 'spectrograph', 'arm'])
    op.create_unique_constraint(None, 'telescope', ['pfs_visit_id'])
    op.create_unique_constraint(None, 'test', ['test_id'])
    op.add_column('throughput', sa.Column('wavelength_ref', sa.REAL(), nullable=True, comment='the reference wavelength to measure the total throughput (nm)'))
    op.alter_column('throughput', 'throughput_mean',
               existing_type=sa.REAL(),
               comment='the total throughput (mean)',
               existing_comment='the instrumental throughput (mean)',
               existing_nullable=True)
    op.alter_column('throughput', 'throughput_median',
               existing_type=sa.REAL(),
               comment='the total throughput (median)',
               existing_comment='the instrumental throughput (median)',
               existing_nullable=True)
    op.alter_column('throughput', 'throughput_sigma',
               existing_type=sa.REAL(),
               comment='the total throughput (sigma)',
               existing_comment='the instrumental throughput (sigma)',
               existing_nullable=True)
    op.create_unique_constraint(None, 'throughput', ['pfs_visit_id'])
    op.add_column('transparency', sa.Column('wavelength_ref', sa.REAL(), nullable=True, comment='the reference wavelength to measure the transparency (nm)'))
    op.create_unique_constraint(None, 'transparency', ['pfs_visit_id'])
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_constraint(None, 'transparency', type_='unique')
    op.drop_column('transparency', 'wavelength_ref')
    op.drop_constraint(None, 'throughput', type_='unique')
    op.alter_column('throughput', 'throughput_sigma',
               existing_type=sa.REAL(),
               comment='the instrumental throughput (sigma)',
               existing_comment='the total throughput (sigma)',
               existing_nullable=True)
    op.alter_column('throughput', 'throughput_median',
               existing_type=sa.REAL(),
               comment='the instrumental throughput (median)',
               existing_comment='the total throughput (median)',
               existing_nullable=True)
    op.alter_column('throughput', 'throughput_mean',
               existing_type=sa.REAL(),
               comment='the instrumental throughput (mean)',
               existing_comment='the total throughput (mean)',
               existing_nullable=True)
    op.drop_column('throughput', 'wavelength_ref')
    op.drop_constraint(None, 'test', type_='unique')
    op.drop_constraint(None, 'telescope', type_='unique')
    op.drop_constraint(None, 'sky_subtraction', type_='unique')
    op.drop_constraint(None, 'sky', type_='unique')
    op.drop_column('sky', 'agc_background_sigma')
    op.drop_column('sky', 'agc_background_median')
    op.drop_column('sky', 'agc_background_mean')
    op.drop_constraint(None, 'seeing', type_='unique')
    op.drop_column('seeing', 'wavelength_ref')
    op.drop_constraint(None, 'pfs_visit', type_='unique')
    op.drop_constraint(None, 'noise', type_='unique')
    op.drop_column('noise', 'wavelength_ref')
    op.drop_constraint(None, 'moon', type_='unique')
    op.drop_constraint(None, 'mask', type_='unique')
    op.drop_constraint(None, 'h4_persistence', type_='unique')
    op.drop_constraint(None, 'guide_offset', type_='unique')
    op.drop_constraint(None, 'flux_calibration', type_='unique')
    op.drop_constraint(None, 'exposure_time', type_='unique')
    op.drop_constraint(None, 'dichroic_continuity', type_='unique')
    op.drop_constraint(None, 'detector_map', type_='unique')
    op.drop_constraint(None, 'data_qa', type_='unique')
    op.drop_constraint(None, 'data_processing', type_='unique')
    op.drop_constraint(None, 'cosmic_rays', type_='unique')
    op.drop_constraint(None, 'cobra_convergence', type_='unique')
    # ### end Alembic commands ###
