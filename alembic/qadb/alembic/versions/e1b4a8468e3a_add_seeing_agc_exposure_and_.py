"""add seeing_agc_exposure and transparency_agc_exposure

Revision ID: e1b4a8468e3a
Revises: c16e832efa75
Create Date: 2024-04-16 22:27:34.129999

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = 'e1b4a8468e3a'
down_revision: Union[str, None] = 'c16e832efa75'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('seeing_agc_exposure',
                    sa.Column('pfs_visit_id', sa.Integer(),
                              autoincrement=False, nullable=False),
                    sa.Column('agc_exposure_id', sa.Integer(),
                              autoincrement=False, nullable=False),
                    sa.Column('seeing_mean', sa.REAL(), nullable=True,
                              comment='seeing FWHM mean (arcsec.)'),
                    sa.Column('seeing_median', sa.REAL(), nullable=True,
                              comment='seeing FWHM median (arcsec.)'),
                    sa.Column('seeing_sigma', sa.REAL(), nullable=True,
                              comment='seeing FWHM sigma (arcsec.)'),
                    sa.Column('wavelength_ref', sa.REAL(), nullable=True,
                              comment='the reference wavelength to measure the seeing (nm)'),
                    sa.Column('taken_at', sa.DateTime(), nullable=True,
                              comment='The time at which the exposure was taken [YYYY-MM-DDThh-mm-sss]'),
                    sa.ForeignKeyConstraint(
                        ['pfs_visit_id'], ['pfs_visit.pfs_visit_id'], ),
                    sa.PrimaryKeyConstraint('pfs_visit_id', 'agc_exposure_id'),
                    sa.UniqueConstraint('agc_exposure_id'),
                    sa.UniqueConstraint('pfs_visit_id'),
                    sa.UniqueConstraint('pfs_visit_id', 'agc_exposure_id')
                    )
    op.create_table('transparency_agc_exposure',
                    sa.Column('pfs_visit_id', sa.Integer(),
                              autoincrement=False, nullable=False),
                    sa.Column('agc_exposure_id', sa.Integer(),
                              autoincrement=False, nullable=False),
                    sa.Column('transparency_mean', sa.REAL(),
                              nullable=True, comment='transparency mean'),
                    sa.Column('transparency_median', sa.REAL(),
                              nullable=True, comment='transparency median'),
                    sa.Column('transparency_sigma', sa.REAL(),
                              nullable=True, comment='transparency sigma'),
                    sa.Column('wavelength_ref', sa.REAL(), nullable=True,
                              comment='the reference wavelength to measure the transparency (nm)'),
                    sa.Column('taken_at', sa.DateTime(), nullable=True,
                              comment='The time at which the exposure was taken [YYYY-MM-DDThh-mm-sss]'),
                    sa.ForeignKeyConstraint(
                        ['pfs_visit_id'], ['pfs_visit.pfs_visit_id'], ),
                    sa.PrimaryKeyConstraint('pfs_visit_id', 'agc_exposure_id'),
                    sa.UniqueConstraint('agc_exposure_id'),
                    sa.UniqueConstraint('pfs_visit_id'),
                    sa.UniqueConstraint('pfs_visit_id', 'agc_exposure_id')
                    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('transparency_agc_exposure')
    op.drop_table('seeing_agc_exposure')
    # ### end Alembic commands ###
